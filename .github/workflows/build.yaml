name: Action

# Déclenche le workflow à chaque push sur la branche main
on:
  push:
    branches:
      - main

# Définition des jobs du workflow
jobs:
  build:
    # Spécifie l'environnement d'exécution
    runs-on: ubuntu-latest

    # Définition des services requis pour le job
    services:
      # Service Elasticsearch
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.14.0
        ports:
          - 9200:9200
        environment:
          ELASTIC_USERNAME: ${{ secrets.ELASTIC_USERNAME }}
          ELASTIC_PASSWORD: ${{ secrets.ELASTIC_PASSWORD }}
          discovery.type: single-node

    steps:
      # Étape pour récupérer le code source du dépôt
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Étape pour attendre que Elasticsearch soit prêt
      - name: Wait for Elasticsearch
        run:
          | # Exécute une boucle jusqu'à ce que la commande curl réussisse à se connecter à Elasticsearch
          until curl -sS -u ${{ secrets.ELASTIC_USERNAME }}:${{ secrets.ELASTIC_PASSWORD }} http://elasticsearch:9200; do
            echo "Waiting for Elasticsearch...";
            sleep 10;
          done

      # Étape de Continuous Integration : Construire et pousser l'image Docker de l'application
      - name: Continuous Integration
        run: |
          docker build . -t ${{ secrets.DOCKER_USERNAME }}/job_market:latest
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push ${{ secrets.DOCKER_USERNAME }}/job_market:latest

      # Étape de Continuous Deployment : Déployer l'application sur le serveur distant
      - name: Continuous Deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Créer un réseau Docker pour la communication entre conteneurs
            docker network create job_network || true

            # Arrêter et supprimer les conteneurs existants
            docker container stop job_market_api || true
            docker container rm job_market_api || true

            docker container stop elasticsearch || true
            docker container rm elasticsearch || true

            # Démarrer un nouveau conteneur Elasticsearch
            docker run -d --name elasticsearch --network job_network -p 9200:9200 -e "discovery.type=single-node" -e "ELASTIC_USERNAME=${{ secrets.ELASTIC_USERNAME }}" -e "ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }}" docker.elastic.co/elasticsearch/elasticsearch:8.14.0

            # Attendre que Elasticsearch soit prêt
            until curl -sS -u ${{ secrets.ELASTIC_USERNAME }}:${{ secrets.ELASTIC_PASSWORD }} http://elasticsearch:9200; do
              echo "Waiting for Elasticsearch...";
              sleep 10;
            done

            # Démarrer un nouveau conteneur pour l'application
            docker run -d --name job_market_api --network job_network -p 8000:8000 -e ELASTIC_HOST=elasticsearch -e ELASTIC_PORT=9200 -e ELASTIC_USERNAME=${{ secrets.ELASTIC_USERNAME }} -e ELASTIC_PASSWORD=${{ secrets.ELASTIC_PASSWORD }} ${{ secrets.DOCKER_USERNAME }}/job_market:latest
